from aiogram import Router, types, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

import logging

router = Router()


class FeedbackStates(StatesGroup):
    waiting_feedback = State()


@router.message(F.text == "üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
async def ask_feedback(msg: types.Message, state: FSMContext):
    await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–∑—ã–≤. –ú—ã —Ü–µ–Ω–∏–º —Ç–≤–æ–µ –º–Ω–µ–Ω–∏–µ! ‚ú®")
    await state.set_state(FeedbackStates.waiting_feedback)


@router.message(FeedbackStates.waiting_feedback)
async def save_feedback(msg: types.Message, state: FSMContext):
    try:
        user_feedback = msg.text
        user = msg.from_user
        with open("feedback.txt", "a", encoding="utf-8") as f:
            f.write(f"{user.id} ({user.full_name}): {user_feedback}\n")

        logging.info(f"Feedback received from {user.id}: {user_feedback}")
        await msg.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! üòä")
        await state.clear()
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞")
        await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞.")
